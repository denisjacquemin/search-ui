<!DOCTYPE html>
<html>
<head>
    <title>Search HomeHub</title>
    <meta http-equiv="x-ua-compatible" content="IE=edge" />
    <meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-touch-fullscreen" content="yes">
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
    <script src="../react.min.js"></script>
    <script src="../JSXTransformer.js"></script>
    <script type="text/javascript" src="../snap.min.js"></script>
    <link rel="stylesheet" type="text/css" href="../layout.css">
    <link rel="stylesheet" type="text/css" href="../skin.css">
</head>
<body class=" <% if (! is_phone) { %>no-snap<% } %>">
    <section id="content"></section>

    <script src="../jquery.js"></script>
    <script type="text/jsx">
      /** @jsx React.DOM */

      var PropertyBox = React.createClass({
        handleSearchSubmit: function(property) {
          $.ajax({
                url: this.props.url,
                dataType: 'json',
                type: 'GET',
                data: property,
                success: function(data) {
                  console.log('number of hits: ' + data.hits.hits.length);
                  if (data.hits != undefined) { this.setState({total: data.hits.total}); }
                  if (data.hits.hits != undefined) { this.setState({properties: data.hits.hits}); }
                  if (data.aggregations != undefined) { this.setState({aggregations: data.aggregations}); }
                }.bind(this),
                error: function(xhr, status, err) {
                  console.error(this.props.url, status, err.toString());
                }.bind(this)
          });
        },
        getInitialState: function() {
          return {total: 0, properties: [], aggregations: []};
        },
        componentDidMount: function() {
          //this.loadPropertiesFromServer();
          //setInterval(this.loadPropertiesFromServer, this.props.pollInterval);
          <% if (is_phone) { %>
              var snapper = new Snap({
                    element: document.getElementById('resultsBox'),
                    disable: 'right'
              });
              snapper.open('left');
          <% } %>

        },
        render: function() {
          return (
            <div>
                <div className="searchBox snap-drawers">
                  <SearchForm onSearchSubmit={this.handleSearchSubmit} aggregations={this.state.aggregations} />
                </div>
                <div className="resultsBox snap-content" id="resultsBox">
                    <span>Found {this.state.total} matching results</span>
                    <Properties data={this.state.properties} />
                </div>
            </div>
          );
        }
      });



      var SearchForm = React.createClass({
        handleSubmit: function() {

          // building query parameters hash
          var query = {};
          query['lon'] = this.refs.lon.getDOMNode().value.trim();
          query['lat'] = this.refs.lat.getDOMNode().value.trim();
          query['distance'] = this.refs.distance.getDOMNode().value.trim();
          if (this.refs.roommin != undefined && this.refs.roommin.getDOMNode().value != "") { query['roommin'] = this.refs.roommin.getDOMNode().value.trim(); }
          if (this.refs.roommax != undefined && this.refs.roommax.getDOMNode().value != "") { query['roommax'] = this.refs.roommax.getDOMNode().value.trim(); }
          if (this.refs.pricemin != undefined && this.refs.pricemin.getDOMNode().value != "") { query['pricemin'] = this.refs.pricemin.getDOMNode().value.trim(); }
          if (this.refs.pricemax != undefined && this.refs.pricemax.getDOMNode().value != "") { query['pricemax'] = this.refs.pricemax.getDOMNode().value.trim(); }
          if (this.refs.surfacemin != undefined && this.refs.surfacemin.getDOMNode().value != "") { query['surfacemin'] = this.refs.surfacemin.getDOMNode().value.trim(); }
          if (this.refs.surfacemax != undefined && this.refs.surfacemax.getDOMNode().value != "") { query['surfacemax'] = this.refs.surfacemax.getDOMNode().value.trim(); }
          query['rooms'] = this.refs.rooms.getDOMNode().value.trim();

          this.props.onSearchSubmit(query);

          return false;
        },
        handlePriceAggChange: function(from, to) {
          this.refs.pricemin.getDOMNode().value = from;
          this.refs.pricemax.getDOMNode().value = to;
          this.handleSubmit();
        },
        handleBedRoomsAggChange: function(value, toBeAdded) {
          var arrayOfValue = [];
          arrayOfValue = this.refs.rooms.getDOMNode().value.split(',');
          if (toBeAdded) {
            arrayOfValue.push(value);
          } else {
            arrayOfValue = arrayOfValue.filter(function(e) {
                return e != value;
            });
          }
          if (arrayOfValue[0] == "") arrayOfValue.shift();
          this.refs.rooms.getDOMNode().value = arrayOfValue.join(',');
          this.handleSubmit();
        },
        handleSurfaceAggChange: function(from, to) {
          this.refs.surfacemin.getDOMNode().value = from;
          this.refs.surfacemax.getDOMNode().value = to;
          this.handleSubmit();
        },
        render: function() {

          var aggBedRoomsCountNodes = [];
          if(this.props.aggregations.hasOwnProperty("bedroomscount_ranges")) {
            aggBedRoomsCountNodes =  <Aggregations title="Bedrooms"
                                                    aggregations={this.props.aggregations.bedroomscount_ranges.buckets}
                                                    onAggChange={this.handleBedRoomsAggChange}
                                                    alllabel="All Room Count"
                                                    multiple="true"
                                                    type="value" />
          }

          var aggPriceNodes = [];
          if(this.props.aggregations.hasOwnProperty("price_ranges")) {
            aggPriceNodes =  <Aggregations title="Prices"
                                            aggregations={this.props.aggregations.price_ranges.buckets}
                                            onAggChange={this.handlePriceAggChange}
                                            alllabel="All Price"
                                            multiple="false"
                                            type="range" />
          }

          var aggSurfaceNodes = [];
          if(this.props.aggregations.hasOwnProperty("surface_ranges")) {
            aggSurfaceNodes =  <Aggregations title="Surface"
                                            aggregations={this.props.aggregations.surface_ranges.buckets}
                                            onAggChange={this.handleSurfaceAggChange}
                                            alllabel="All Surfaces"
                                            multiple="false"
                                            type="range" />
          }

          return (
            <div className="snap-drawer snap-drawer-left">
                <form onSubmit={this.handleSubmit}>
                  <input name="location" />
                  <Suggest />
                  <input type="hidden" ref="lon" value="5.588005" />
                  <input type="hidden" ref="lat" value="50.615451" />
                  <select ref="distance">
                    <option value="5">5km</option>
                    <option value="10">10km</option>
                    <option value="20">20km</option>
                    <option value="50">50km</option>
                    <option value="200">200km</option>
                    <option value="2000">2000km</option>
                    <option value="20000">20000km</option>
                  </select>
                  <input type="hidden" ref="pricemin" />
                  <input type="hidden" ref="pricemax" />
                  <input type="hidden" ref="surfacemin" />
                  <input type="hidden" ref="surfacemax" />
                  <input type="submit" value="Chercher" />
                  <input type="hidden" ref="rooms" />
                  <div className="aggregations">
                      <div className="aggregation">
                        {aggPriceNodes}
                      </div>
                      <div className="aggregation">
                        {aggBedRoomsCountNodes}
                      </div>
                      <div className="aggregation">
                        {aggSurfaceNodes}
                      </div>
                  </div>
                </form>
            </div>
          );
        }
      });

      <%- include ../partials/suggest %>
      <%- include ../partials/aggregations %>
      <%- include ../partials/aggregation %>
      <%- include ../partials/properties %>









      
      //React.renderComponent( <PropertyBox url="https://homehub.herokuapp.com/api/properties" />, document.getElementById('content') );
      React.renderComponent( <PropertyBox url="http://localhost:8080/api/properties" />, document.getElementById('content') );



      //var properties = [
      //  {title: "title 1", description: "description 1"},
      //  {title: "title 2", description: "description 2"}
      //];
      //
      //React.renderComponent( <Properties data={properties} />, document.getElementById('results') );
    </script>
</body>
</html>